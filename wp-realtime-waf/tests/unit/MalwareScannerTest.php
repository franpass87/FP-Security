<?php

namespace WPRTWAF\Tests\Unit;

use PHPUnit\Framework\TestCase;
use WPRTWAF\Integrity\MalwareScanner;

class MalwareScannerTest extends TestCase
{
    private string $workingDir;

    protected function setUp(): void
    {
        parent::setUp();
        $this->workingDir = sys_get_temp_dir() . '/waf-malware-' . uniqid('', true);
        mkdir($this->workingDir, 0777, true);
    }

    protected function tearDown(): void
    {
        $this->removeDirectory($this->workingDir);
        parent::tearDown();
    }

    public function testScanFileDetectsEvalUsage(): void
    {
        $file = $this->workingDir . '/suspect.php';
        file_put_contents($file, "<?php eval('malicious');\n");

        $scanner = MalwareScanner::withDefaultPatterns();
        $matches = $scanner->scanFile($file);

        $this->assertNotEmpty($matches);
        $this->assertSame($file, $matches[0]->path);
    }

    public function testScanPathsTraversesDirectories(): void
    {
        $dir = $this->workingDir . '/dir';
        mkdir($dir, 0777, true);
        file_put_contents($dir . '/clean.php', "<?php echo 'clean';\n");
        file_put_contents($dir . '/bad.php', "<?php system('whoami');\n");

        $scanner = MalwareScanner::withDefaultPatterns();
        $result = $scanner->scanPaths([$dir]);

        $this->assertTrue($result->hasFindings());
        $this->assertNotEmpty($result->getMatches());
    }

    private function removeDirectory(string $path): void
    {
        if (!is_dir($path)) {
            return;
        }

        foreach (scandir($path) ?: [] as $item) {
            if ($item === '.' || $item === '..') {
                continue;
            }

            $target = $path . DIRECTORY_SEPARATOR . $item;
            if (is_dir($target)) {
                $this->removeDirectory($target);
            } else {
                @unlink($target);
            }
        }

        @rmdir($path);
    }
}
