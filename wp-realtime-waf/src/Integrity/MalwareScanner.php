<?php

namespace WPRTWAF\Integrity;

use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use SplFileInfo;

class MalwareScanner
{
    /**
     * @param array<int, array{id: string, pattern: string, description: string}> $signatures
     */
    public function __construct(private array $signatures)
    {
    }

    public static function withDefaultPatterns(): self
    {
        return new self([
            ['id' => 'eval', 'pattern' => '/\\beval\\s*\\(/i', 'description' => 'Use of eval()'],
            ['id' => 'assert', 'pattern' => '/\\bassert\\s*\\(/i', 'description' => 'Use of assert()'],
            ['id' => 'base64_decode', 'pattern' => '/base64_decode\\s*\\(/i', 'description' => 'Use of base64_decode()'],
            ['id' => 'system', 'pattern' => '/\\bsystem\\s*\\(/i', 'description' => 'Use of system()'],
            ['id' => 'shell_exec', 'pattern' => '/shell_exec\\s*\\(/i', 'description' => 'Use of shell_exec()'],
            ['id' => 'passthru', 'pattern' => '/passthru\\s*\\(/i', 'description' => 'Use of passthru()'],
            ['id' => 'proc_open', 'pattern' => '/proc_open\\s*\\(/i', 'description' => 'Use of proc_open()'],
            ['id' => 'popen', 'pattern' => '/popen\\s*\\(/i', 'description' => 'Use of popen()'],
            ['id' => 'preg_replace_e', 'pattern' => '/preg_replace\\s*\\(.*?\\/e[\'\"]/', 'description' => 'preg_replace with /e modifier'],
        ]);
    }

    /**
     * @param array<int, string> $paths
     */
    public function scanPaths(array $paths): MalwareScanResult
    {
        $matches = [];

        foreach ($paths as $path) {
            if (!is_dir($path) && !is_file($path)) {
                continue;
            }

            if (is_file($path)) {
                $matches = array_merge($matches, $this->scanFile($path));
                continue;
            }

            $iterator = new RecursiveIteratorIterator(
                new RecursiveDirectoryIterator($path, RecursiveDirectoryIterator::SKIP_DOTS)
            );

            /** @var SplFileInfo $file */
            foreach ($iterator as $file) {
                if (!$file->isFile()) {
                    continue;
                }

                $matches = array_merge($matches, $this->scanFile($file->getPathname()));
            }
        }

        return new MalwareScanResult($matches, time());
    }

    /**
     * @return array<int, MalwareMatch>
     */
    public function scanFile(string $path): array
    {
        if (!is_readable($path) || !is_file($path)) {
            return [];
        }

        $contents = @file_get_contents($path);
        if (!is_string($contents) || $contents === '') {
            return [];
        }

        $matches = [];

        foreach ($this->signatures as $signature) {
            if (!isset($signature['id'], $signature['pattern'], $signature['description'])) {
                continue;
            }

            if (@preg_match($signature['pattern'], '') === false) {
                continue;
            }

            if (preg_match($signature['pattern'], $contents) === 1) {
                $matches[] = new MalwareMatch(
                    $path,
                    (string) $signature['id'],
                    (string) $signature['pattern'],
                    (string) $signature['description']
                );
            }
        }

        return $matches;
    }
}
